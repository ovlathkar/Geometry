#include <iostream>
using namespace std;
struct point
{
	float x,y;
};
bool check_onsegment(point p, point q, point r)
{
	if (q.x = max (p.x, r.x) && q.x>= min (p.x, r.x) && q.y <=max(p.y, r.y) && q.y>=min(p.y,r.y))
	{
		return true;
	}
	else 
	{
		return false;
	}
}
int orientation (point p, point q, point r)
{
	int val;
	val = ((q.y-p.y) * (r.x-q.x) - (q.x - p.x) * (r.y - q.y ));
	if (val == 0)
	{
		return 0;
	}
	else if (val >0)
	{
		return 1;
	}
	else
	{
		return 2;
	}
}
int check_intersect (point p1, point p2, point q1, point q2)
{
	int o1, o2, o3, o4;
	o1 = orientation (p1, q1,p2);
	o2 = orientation (p1, q1, q2);
	o3 = orientation (p2, q2, p1);
	o4 = orientation (p1, q2, q1);
	if (o1 != o2 && o3 != o4)
	{
		return true;
	}
	if (o1 == 0 && check_onsegment(p1,p2, q1))
	{
		return true;
	}
	if (o2 == 0 && check_onsegment(p1, q2, q1))
	{
		return true;
	}
	if (o3 == 0 && check_onsegment(p2,p1,q2))
	{
		return true;
	}
	if (o4 == 0 && check_onsegment(p2, q1, q2))
	{
		return true;
	}
	else
	{
		return false;
	}
}
bool check_inside(point poly[], int n, point p)
{
	int inf = 1000;
	point extreme = {inf, p.y};
	int count = 0, i = 1;
	do 
	{
		int next = (i+1)%n;
		if (check_intersect(poly[i], poly[next], p, extreme))
		{
			if (orientation(poly[i],p, poly[next])== 0)
			{
				return check_onsegment(poly[i],p,poly[next]);
			}
			count ++;
		}
		i = next;
	}while(i!=0);
	if (count%2 == 0)
	{
		cout<<"Point is outside the polygon";
	}
	else
	{
		cout<<"Point is inside the polygon";
	}
}
int main()
{
	point poly[] = {{1,0}, {8,3}, {8,8}, {1,5}};
	point p = {3,5};
	int n = (sizeof poly/sizeof poly[0]);
	check_inside(poly, n, p);
	return 0;
	
}
